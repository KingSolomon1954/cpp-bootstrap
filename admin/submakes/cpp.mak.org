# -----------------------------------------------------------------
#
# Submake for C++ compiles with CMake
#
# -----------------------------------------------------------------

ifndef _INCLUDE_CPP_MAK
_INCLUDE_CPP_MAK := 1

ifndef BLD
    $(error Parent makefile must define 'BLD')
endif
ifndef MAK_SHARED
    $(error Parent makefile must define 'MAK_SHARED')
endif
ifndef SCRP_SHARED
    $(error Parent makefile must define 'SCRP_SHARED')
endif
ifndef CNTR_TECH
    $(error Parent makefile must define 'CNTR_TECH')
endif

# -------- Container Startup  --------

ifdef NO_BLD_CNTR
    WORK_TOP          := .
    _CMAKE_SRC        ?= $(TOP)
    CPP_BLD_CNTR_EXEC :=
else
    WORK_TOP   := /work/$(notdir $(CURDIR))
    _CMAKE_SRC ?= /work/$(notdir $(CURDIR))
    # Use -it because makefile/scripts prompts the user for input at times
    CPP_BLD_CNTR_EXEC = $(CNTR_TECH) exec -it --workdir $(WORK_TOP) $(CNTR_GCC_TOOLS_NAME)
endif

ifdef NO_BLD_CNTR

start-cpp-bld-container:

else

include $(MAK_SHARED)/container-names-gcc.mak

start-cpp-bld-container:
	@$(SCRP_SHARED)/start-bld-container.bash \
	    $(CNTR_TECH) "$(CNTR_USER)" \
	    $(CNTR_GCC_TOOLS_REPO) $(CNTR_GCC_TOOLS_PATH) $(CNTR_GCC_TOOLS_NAME) $(DBG_PORT)
endif

.PHONY: start-cpp-bld-container

PROCS ?= $(shell nproc)

HELP_TXT += "\n\
start-cpp-bld-container, Starts the C++ bld container if necessary\n\
"

# -------- Build Folders --------

BLD_DEBUG := $(BLD)/debug
BLD_PROD  := $(BLD)/prod

# -------- CMake Section --------

cmake-init-prod: $(BLD_PROD)/Makefile

$(BLD_PROD)/Makefile:
	mkdir -p $(BLD_PROD)
	$(CPP_BLD_CNTR_EXEC) cmake $(CMAKE_ARGS) \
	    -DCMAKE_BUILD_TYPE=Release -S $(_CMAKE_SRC) -B $(BLD_PROD)

cmake-init-debug: $(BLD_DEBUG)/Makefile

$(BLD_DEBUG)/Makefile:
	mkdir -p $(BLD_DEBUG)
	$(CPP_BLD_CNTR_EXEC) cmake $(CMAKE_ARGS) \
	    -DCMAKE_BUILD_TYPE=Debug -S $(_CMAKE_SRC) -B $(BLD_DEBUG)

# Directly invoke cmake's Makefile in prod build folder
_build-it-prod:
	$(CPP_BLD_CNTR_EXEC) make -C $(BLD_PROD) -j$(PROCS)

# Directly invoke cmake's Makefile in debug build folder
_build-it-debug:
	$(CPP_BLD_CNTR_EXEC) make -C $(BLD_DEBUG) -j$(PROCS)

.PHONY: cmake-init-prod cmake-init-debug \
        _build-it-prod _build-it-debug

# -------- Last Build Type Section --------

# This file remembers the default build type (Release or Debug)
DEFAULT_BLD_TYPE_FILE := $(BLD)/default-build-type.txt

# Set last build type to a default ahead of reading it from file.
DEFAULT_BUILD_TYPE := Debug

# Read BUILD_TYPE from file if file exists. Sets the DEFAULT_BUILD_TYPE
# var.  If file doesn't exist, then Make executes the target
# $(DEFAULT_BLD_TYPE_FILE) following this ifeq check. The file is created
# with default of "Debug".
#
ifneq ($(findstring clean,$(MAKECMDGOALS)),clean)
    -include $(DEFAULT_BLD_TYPE_FILE)
endif

$(DEFAULT_BLD_TYPE_FILE):
	@mkdir -p $(BLD)
	@echo "DEFAULT_BUILD_TYPE := Debug" > $@

_set-build-type-prod:
	@echo "DEFAULT_BUILD_TYPE := Release" > $(DEFAULT_BLD_TYPE_FILE)
	@cat $(DEFAULT_BLD_TYPE_FILE)

_set-build-type-debug:
	@echo "DEFAULT_BUILD_TYPE := Debug" > $(DEFAULT_BLD_TYPE_FILE)
	@cat $(DEFAULT_BLD_TYPE_FILE)

_set-build-type-show:
	@cat $(DEFAULT_BLD_TYPE_FILE)

set-prod: _set-build-type-prod

set-debug: _set-build-type-debug

set-show: _set-build-type-show

show-default-build: set-show

.PHONY: set-prod set-debug set-show \
        _set-build-type-prod _set-build-type-debug \
        _set-build-type-show show-default-build

# -------- Top Level Targets --------

ifeq "$(DEFAULT_BUILD_TYPE)" "Release"
    app: prod
else ifeq "$(DEFAULT_BUILD_TYPE)" "Debug"
    app: debug
else
    $(error bad value for DEFAULT_BUILD_TYPE: "$(DEFAULT_BUILD_TYPE)")
endif

both:  prod debug

# prod:  login-arty start-cpp-bld-container

prod:  start-cpp-bld-container \
       conan-prod cmake-init-prod _build-it-prod

# debug: login-arty start-cpp-bld-container

debug: start-cpp-bld-container  \
       conan-debug cmake-init-debug _build-it-debug

.PHONY: app both prod debug

# ------------ CPP Clean Section ------------

clean::
	rm -rf $(BLD)

clean-prod:
	rm -rf $(BLD_PROD)

clean-debug:
	rm -rf $(BLD_DEBUG)

.PHONY: clean clean-prod clean-debug

# ------------ Help Section ------------

HELP_TXT += "\n\
app,                Builds the default tree. Initial default is debug\n\
debug,              Builds the debug tree\n\
prod,               Builds the prod tree\n\
both,               Builds both prod and debug\n\
cmake-init-prod,    Initialize cmake for prod tree\n\
cmake-init-debug,   Initialize cmake for debug tree\n\
clean,              Deletes $(BLD) dir\n\
clean-prod,         Deletes prod build tree\n\
clean-debug,        Deletes debug build tree\n\
set-prod,           Sets default build to prod\n\
set-debug,          Sets default build to debug\n\
show-default-build, Show the default build type\n\
"

endif
