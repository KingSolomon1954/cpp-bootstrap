# --------------------------------------------------------------------
#
# Build branches. Supports developer controls to skip various parts of
# the build. The following are the recognized keywords. Place anywhere
# within commit message. Multiple controls honored. Not case sensitive.
#
# [skip-all]
# [skip-compile-both]
# [skip-compile-debug]
# [skip-compile-prod]
# [skip-utest-both]
# [skip-utest-debug]
# [skip-utest-prod]
# [skip-analysis]
# [skip-coverage]
# [skip-docs]
#
# --------------------------------------------------------------------

name: Branch Build
run-name: Branch Build ${{ github.event.head_commit.message }}

on:
  push:
    branches-ignore:
      - main
      - master

permissions:
  contents: write
      
jobs:

  Build:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip-all]')"

    steps:
      - name: Install podman
        run: sudo apt install -y podman

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build debug
        if: "!contains(github.event.head_commit.message, '[skip-compile-both]') && \
             !contains(github.event.head_commit.message, '[skip-compile-debug]')"
        run: make debug

      - name: Run unit tests on debug
        if: "!contains(github.event.head_commit.message, '[skip-compile-both]') && \
             !contains(github.event.head_commit.message, '[skip-compile-debug]') && \
             !contains(github.event.head_commit.message, '[skip-utest-both]') && \
             !contains(github.event.head_commit.message, '[skip-utest-debug]')"
        run: make unit-test-debug

      - name: Build prod
        if: "!contains(github.event.head_commit.message, '[skip-compile-both]') && \
             !contains(github.event.head_commit.message, '[skip-compile-prod]')"
        run: make prod

      - name: Run unit tests on prod
        if: "!contains(github.event.head_commit.message, '[skip-compile-both]') && \
             !contains(github.event.head_commit.message, '[skip-compile-prod]') && \
             !contains(github.event.head_commit.message, '[skip-utest-both]') && \
             !contains(github.event.head_commit.message, '[skip-utest-prod]')"
        run: make unit-test-prod

      - name: Run static analysis
        if: "!contains(github.event.head_commit.message, '[skip-analysis]')"
        run: make static-analysis

      - name: Run code coverage
        if: "!contains(github.event.head_commit.message, '[skip-coverage]')"
        run: make code-coverage

      - name: Build docs
        if: "!contains(github.event.head_commit.message, '[skip-docs]')"
        run: make docs

# Experimenting
        
      - name: Create release tar ball
        id: tar-ball
        run: |
          APP_NAME=redflame
          APP_VERSION=v$(cat version)
          APP_NAME_FULL=${APP_NAME}-${APP_VERSION}
          D_REL=_build/release
          D_REL_FILES=${D_REL}/version/${APP_NAME_FULL}
          TAG_NAME=${APP_NAME_FULL}-${{ github.ref_name }}
          TAR_FILE=${D_REL}/${APP_NAME_FULL}.tgz
          mkdir -p ${D_REL_FILES}
          cp -p _build/prod/bin/${APP_NAME} ${D_REL_FILES}/
          tar -czf ${TAR_FILE} --directory=${D_REL_FILES}/.. .
          echo "TAR_FILE=${TAR_FILE}"       >> ${GITHUB_OUTPUT}
          echo "APP_VERSION=${APP_VERSION}" >> ${GITHUB_OUTPUT}
          echo "TAG_NAME=${TAG_NAME}"       >> ${GITHUB_OUTPUT}

      - name: Release actions
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ steps.tar-ball.outputs.TAR_FILE }}
          name: Release ${{ steps.tar-ball.outputs.APP_VERSION }}
          tag_name: ${{ steps.tar-ball.outputs.TAG_NAME }}
          # if needed, you can set the release body here
          #body: "Release notes"
          draft: false
          prerelease: false
