# --------------------------------------------------------------------
#
# Build branches. Supports developer controls to skip various parts of
# the build. The following are the recognized keywords. Place anywhere
# within commit message. Multiple controls honored. Not case sensitive.
#
# [skip all]
# [skip compile-both]
# [skip compile-debug]
# [skip compile-prod]
# [skip utest-both]
# [skip utest-debug]
# [skip utest-prod]
# [skip analysis]
# [skip coverage]
# [skip docs]
#
# --------------------------------------------------------------------

name: Branch Build
run-name: Branch Build ${{ github.event.head_commit.message }}

on:
  push:
    branches-ignore:
      - main
      - master

jobs:

  Build:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip all]')"

    steps:
      - name: Install podman
        run: sudo apt install -y podman

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build debug
        if: "!contains(github.event.head_commit.message, '[skip compile-both]') && \
             !contains(github.event.head_commit.message, '[skip compile-debug]')"
        run: make debug

      - name: Run unit tests on debug
        if: "!contains(github.event.head_commit.message, '[skip compile-both]') && \
             !contains(github.event.head_commit.message, '[skip compile-debug]') && \
             !contains(github.event.head_commit.message, '[skip compile-utest-both]') && \
             !contains(github.event.head_commit.message, '[skip compile-utest-debug]')"
        run: make unit-test-debug

      - name: Build prod
        if: "!contains(github.event.head_commit.message, '[skip compile-both]') && \
             !contains(github.event.head_commit.message, '[skip compile-prod]')"
        run: make prod

      - name: Run unit tests on prod
        if: "!contains(github.event.head_commit.message, '[skip compile-both]') && \
             !contains(github.event.head_commit.message, '[skip compile-prod]') && \
             !contains(github.event.head_commit.message, '[skip compile-utest-both]') && \
             !contains(github.event.head_commit.message, '[skip compile-utest-prod]')"
        run: make unit-test-prod

      - name: Run static analysis
        if: "!contains(github.event.head_commit.message, '[skip analysis]')"
        run: make static-analysis

      - name: Run code coverage
        if: "!contains(github.event.head_commit.message, '[skip coverage]')"
        run: make code-coverage

      - name: Build docs
        if: "!contains(github.event.head_commit.message, '[skip docs]')"
        run: make docs

# Experimenting
        
      - name: Version label
        id: version
        # run: echo ::set-output name=name::${GITHUB_REF#refs/tags/}
        run: |
          echo "APP_NAME=redflame" >> $GITHUB_ENV
          echo "APP_VERSION=v1.0.0" >> $GITHUB_ENV
          echo "APP_FULL=redflame-v1.0.0" >> $GITHUB_ENV
          echo "name::${GITHUB_REF#refs/tags/}"

      - name: Create release tar ball
        run: |
          mkdir -p _build/release/version/${APP_FULL}
          cp -p _build/prod/bin/${APP_NAME} _build/release/version/${APP_FULL}/
          tar -czf _build/release/${APP_FULL}.tgz --directory=_build/release/version .
          ls _build/release

          
#       - name: Release actions
#         id: release_actions
#         uses: actions/create-release@v1
#         env:
#           # This token is provided by Actions, you do not
#           # need to create your own token        
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
#         with:
#           tag_name: ${{ github.ref }}
#           release_name: Release ${{ steps.version.outputs.name }}
#           # if needed, you can set the release body here
#           #body: "Release notes"
#           draft: true
#           prerelease: true
# 
#       - name: Upload release artifacts
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.release_actions.outputs.upload_url }}
#           asset_path: "_build/release/redflame-v1.0.0.tgz"
#           asset_name: "cpp-bootstrap-linux-${{ steps.version.outputs.name }}.tgz"
#           asset_content_type: application/x-tar

#    - name: download artifact
#      uses: actions/download-artifact@v2
#      with:
#        name: "Linux-${{ steps.version.outputs.name }}"
#        path: ./
#
#    - name: upload ubuntu release asset
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }}
#        asset_path: "artifact.tar.gz"
#        asset_name: "${{ env.PROJECT_NAME }}-Linux-${{ steps.version.outputs.name }}.tar.gz"
#        asset_content_type: application/x-tar                  
